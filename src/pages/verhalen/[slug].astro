---
import Layout from '@/layouts/Layout.astro';
import { getCollection } from 'astro:content';
import type { ImageMetadata } from 'astro';
import type { CollectionEntry } from 'astro:content';
import Picture from 'astro/components/Picture.astro';

export async function getStaticPaths() {
  const verhalen = await getCollection('verhalen');

  return verhalen.map((verhaal) => ({
    params: { slug: verhaal.slug },
    props: { verhaal },
  }));
}

const { verhaal }: { verhaal: CollectionEntry<'verhalen'> } = Astro.props;
const { title, excerpt, location, audio, images } = verhaal.data;

const allImages = import.meta.glob<{ default: ImageMetadata }>('/src/uploads/*.{jpg,jpeg,png}');
const importedImages = images?.length
  ? await Promise.all(
      images.map(async (path) => {
        const filename = path.split('/').pop();
        const fullPath = `/src/uploads/${filename}`;
        if (!allImages[fullPath]) {
          console.warn(`Afbeelding niet gevonden: ${fullPath}`);
          return null;
        }
        const mod = await allImages[fullPath]();
        return mod.default;
      })
    )
  : [];

const allAudio = import.meta.glob<{ default: string }>('/src/uploads/*.{mp3,ogg,wav}');
let importedAudio: string | null = null;
if (audio) {
  const filename = audio.split('/').pop();
  const fullPath = `/src/uploads/${filename}`;
  if (allAudio[fullPath]) {
    const mod = await allAudio[fullPath]();
    importedAudio = mod.default;
  } else {
    console.warn(`Audio niet gevonden: ${fullPath}`);
  }
}
---

<Layout title={title} description={excerpt}>
  
  <article class="relative h-screen w-full text-white overflow-hidden" data-lat={location.lat} data-lng={location.lng}>

    <!-- Background carousel -->
    <div class="absolute inset-0 z-0">
      {importedImages && importedImages.map((img, i) =>
        img && (
          <Picture
            src={img}
            alt={title}
            class={`absolute inset-0 object-cover w-full h-full opacity-0 fade transition-opacity duration-1000 ${i === 0 ? 'opacity-100 z-10' : 'z-0'}`}
            style="transition: opacity 1s ease-in-out;"
          />
        )
      )}
      <div class="absolute inset-0 bg-black/60 z-20"></div>
    </div>

    <!-- Audio player UI -->
    <div class="relative z-30 flex flex-col justify-center items-center h-full px-4 text-center">
      <h1 class="text-4xl md:text-6xl font-bold mb-8 text-amber-100">{title}</h1>

      {importedAudio && (
        <div class="w-full max-w-2xl">
          <audio id="audio" class="w-full hidden">
            <source src={importedAudio} type="audio/mpeg" />
          </audio>

          <!-- Custom controls -->
          <div class="flex flex-col items-center gap-4">
            <button id="playPause" class="text-white text-6xl hover:scale-110 transition-transform">Afspelen</button>

            <div class="relative w-full h-2 bg-white/30 rounded overflow-hidden">
              <div id="bufferBar" class="absolute h-full bg-white/50 w-0"></div>
              <div id="progressBar" class="absolute h-full bg-white w-0"></div>
            </div>

            <div class="text-sm text-white/70" id="timer">00:00 / 00:00</div>
          </div>
        </div>
      )}
    </div>

    <script type="module">
      const audio = document.getElementById('audio');
      const playPause = document.getElementById('playPause');
      const progressBar = document.getElementById('progressBar');
      const bufferBar = document.getElementById('bufferBar');
      const timer = document.getElementById('timer');

      playPause.addEventListener('click', () => {
        if (audio.paused) {
          audio.play();
          playPause.textContent = '⏸️';
        } else {
          audio.pause();
          playPause.textContent = '▶️';
        }
      });

      audio.addEventListener('timeupdate', () => {
        const percent = (audio.currentTime / audio.duration) * 100;
        progressBar.style.width = percent + '%';

        const formatTime = (t) => {
          const m = Math.floor(t / 60).toString().padStart(2, '0');
          const s = Math.floor(t % 60).toString().padStart(2, '0');
          return `${m}:${s}`;
        };
        timer.textContent = `${formatTime(audio.currentTime)} / ${formatTime(audio.duration)}`;
      });

      audio.addEventListener('progress', () => {
        if (audio.buffered.length > 0) {
          const end = audio.buffered.end(audio.buffered.length - 1);
          const percent = (end / audio.duration) * 100;
          bufferBar.style.width = percent + '%';
        }
      });

      // Simple background carousel
      const bgImages = document.querySelectorAll('picture');
      let current = 0;
      setInterval(() => {
        if (bgImages.length <= 1) return;
        bgImages[current].classList.remove('opacity-100');
        current = (current + 1) % bgImages.length;
        bgImages[current].classList.add('opacity-100');
      }, 5000);
    </script>

  </article>
</Layout>